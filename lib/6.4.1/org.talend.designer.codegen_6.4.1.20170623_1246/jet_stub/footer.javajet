<%@ jet
    package="org.talend.designer.codegen.translators"
    imports="
        org.talend.core.model.process.IProcess
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.CorePlugin
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.IConnection
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.IMetadataColumn
        java.util.Vector
        java.util.List
        java.util.ArrayList
        java.util.Set
        java.util.HashSet
        org.talend.core.model.process.IContextParameter
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.utils.JavaResourcesHelper
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IContext
        org.talend.core.model.process.ProcessUtils
    "
    class="Footer"
    skeleton="footer_java.skeleton"
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess)v.get(0);
    String className = process.getName();
    boolean isTestContainer=ProcessUtils.isTestContainer(process);
    if (isTestContainer) {
        className = className + "Test";
    }

    List<INode> rootNodes = (List<INode>)v.get(1);
	boolean containsTPartitioner = process.getNodesOfType("tPartitioner").size() > 0 ? true : false;
    boolean stats = codeGenArgument.isStatistics();
    boolean trace = codeGenArgument.isTrace();
    boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();
    List<IContextParameter> params = new ArrayList<IContextParameter>();
    params=process.getContextManager().getDefaultContext().getContextParameterList();

	String jobFolderName = "";
	IProcess baseProcess = ProcessUtils.getTestContainerBaseProcess(process);
	if (baseProcess != null) {
		jobFolderName = JavaResourcesHelper.getJobFolderName(baseProcess.getName(), baseProcess.getVersion()) + '/';
	}
	jobFolderName = jobFolderName + JavaResourcesHelper.getJobFolderName(process.getName(), process.getVersion());
	String jobClassPackageFolder = codeGenArgument.getCurrentProjectName().toLowerCase() + '/' + jobFolderName;

    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(process, "__LOG4J_ACTIVATE__"));

    boolean exist_tParallelize = false;
    List<? extends INode> tParallelizeList = process.getNodesOfType("tParallelize");
    if(tParallelizeList != null && tParallelizeList.size() > 0){
        exist_tParallelize = true;
    }

    boolean exist_tMOM = false;
    List<INode> momComponentsList = (List<INode>)process.getNodesOfType("tMomConnection");
    momComponentsList.addAll((List<INode>)process.getNodesOfType("tMomInput"));
    momComponentsList.addAll((List<INode>)process.getNodesOfType("tMomOutput"));
    if (momComponentsList.size() > 0) {
        exist_tMOM = true;
    }

    String[] sqlDbComponents = new String[] {
        "tAccessConnection",
        "tAmazonMysqlConnection",
        "tAmazonOracleConnection",
        "tAS400Connection",
        "tDB2Connection",
        "tFirebirdConnection",
        "tGreenplumConnection",
        "tHiveConnection",
        "tInformixConnection",
        "tIngresConnection",
        "tInterbaseConnection",
        "tJDBCConnection",
        "tMSSqlConnection",
        "tMysqlConnection",
        "tNetezzaConnection",
        "tOracleConnection",
        "tParAccelConnection",
        "tPostgresPlusConnection",
        "tPostgresqlConnection",
        "tRedshiftConnection",
        "tSQLiteConnection",
        "tSybaseConnection",
        "tTeradataConnection",
        "tVectorWiseConnection",
        "tVerticaConnection"
    };
    boolean exist_tSQLDB = false;
    List<INode> sqlDbComponentsList =  new ArrayList<INode>();
    for (String sqlDbComponent : sqlDbComponents) {
        sqlDbComponentsList.addAll((List<INode>)process.getNodesOfType(sqlDbComponent));
    }
    if (sqlDbComponentsList.size() > 0) {
        exist_tSQLDB = true;
    }

    boolean exist_tSCP = false;
    List<INode> scpComponentsList = (List<INode>)process.getNodesOfType("tSCPConnection");
    if (scpComponentsList.size() > 0) {
        exist_tSCP = true;
    }

    boolean exist_tCassandra = false;
    List<INode> cassandraComponentsList = (List<INode>)process.getNodesOfType("tCassandraConnection");
    if (cassandraComponentsList.size() > 0) {
        exist_tCassandra = true;
    }
    boolean exist_tHBase = false;
    List<INode> hbaseComponentsList = (List<INode>)process.getNodesOfType("tHBaseConnection");
    if (hbaseComponentsList.size() > 0) {
        exist_tHBase = true;
    }

    boolean exist_tFtp = false;
    List<INode> ftpComponentsList = (List<INode>)process.getNodesOfType("tFTPConnection");
    if (ftpComponentsList.size() > 0) {
        exist_tFtp = true;
    }

    boolean exist_tS3 = false;
    List<INode> s3ComponentsList = (List<INode>)process.getNodesOfType("tS3Connection");
    if (s3ComponentsList.size() > 0) {
        exist_tS3 = true;
    }

	boolean exist_tLDAP = false;
    List<INode> ldapComponentsList = (List<INode>)process.getNodesOfType("tLDAPConnection");
    if (ldapComponentsList.size() > 0) {
        exist_tLDAP = true;
    }

    boolean exist_tMDM = false;
    List<INode> mdmComponentsList = (List<INode>)process.getNodesOfType("tMDMConnection");
    if (mdmComponentsList.size() > 0) {
        exist_tMDM = true;
    }

    boolean exist_tPalo = false;
    List<INode> paloComponentsList = (List<INode>)process.getNodesOfType("tPaloConnection");
    if (paloComponentsList.size() > 0) {
        exist_tPalo = true;
    }

    boolean exist_tEXist= false;
    List<INode> existComponentsList = (List<INode>)process.getNodesOfType("tEXistConnection");
    if (existComponentsList.size() > 0) {
        exist_tEXist = true;
    }

    boolean exist_tSalesforce= false;
    List<INode> salesforceComponentsList = (List<INode>)process.getNodesOfType("tSalesforceConnection");
    if (salesforceComponentsList.size() > 0) {
        exist_tSalesforce = true;
    }

    boolean exist_tSAP= false;
    List<INode> sapComponentsList = (List<INode>)process.getNodesOfType("tSAPConnection");
    if (sapComponentsList.size() > 0) {
        exist_tSAP = true;
    }

    boolean exist_tGS= false;
    List<INode> gsComponentsList = (List<INode>)process.getNodesOfType("tGSConnection");
    if (gsComponentsList.size() > 0) {
        exist_tGS = true;
    }

    boolean hasSAM4RS = false;
    for (INode node : process.getNodesOfType("tRESTClient")) {
        if (Boolean.valueOf(ElementParameterParser.getValue(node, "__SERVICE_ACTIVITY_MONITOR__"))) {
            hasSAM4RS = true;
            break;
        }
    }
    boolean hasSAM4WS = false;
    for (INode node : process.getNodesOfType("tESBConsumer")) {
        if (Boolean.valueOf(ElementParameterParser.getValue(node, "__SERVICE_ACTIVITY_MONITOR__"))) {
            hasSAM4WS = true;
            break;
        }
    }
    class API_selector{
        public boolean useDatastax(INode node){
            String dbVersion = ElementParameterParser.getValue(node, "__DB_VERSION__");
            String apiType = ElementParameterParser.getValue(node, "__API_TYPE__");
            return "CASSANDRA_2_2".equals(dbVersion) || "CASSANDRA_3_0".equals(dbVersion) || ("CASSANDRA_2_0_0".equals(dbVersion) && "DATASTAX".equals(apiType));
        }
    }
%>
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "<%=codeGenArgument.getContextName() %>";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

<% if (hasSAM4RS) { %>
    // ESB Service Activity Monitor Feature
    private org.apache.cxf.feature.Feature eventFeature;

    public void setEventFeature(org.apache.cxf.feature.Feature eventFeature) {
        this.eventFeature = eventFeature;
    }
<% } %>

<%
    if(isRunInMultiThread || exist_tParallelize){
%>
    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }
<%
    }
%>

    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final <%=className %> <%=className %>Class = new <%=className %>();

        int exitCode = <%=className %>Class.runJobInTOS(args);
        <%if(isLog4jEnabled){%>
	        if(exitCode==0){
		        log.info("TalendJob: '<%=codeGenArgument.getJobName()%>' - Done.");
	        }
        <%}%>

        System.exit(exitCode);
    }

   <%
    if (isTestContainer) {
         List<String> instanceList =  ProcessUtils.getTestInstances(process);
         String encoding = System.getProperty("file.encoding");
         for(String instance : instanceList)
         {
         String context = ProcessUtils.getInstanceContext(process,instance);
        %>
      @Test
        public void test<%=instance%>() throws java.lang.Exception{
        <%
        int assertNum = ProcessUtils.getAssertAmount(process);
        %>
         if(<%=assertNum%><=0){
            throw new java.lang.Exception("There is no tAssert in your test case!");
          }
            junitGlobalMap.put("tests.log",new String());
            junitGlobalMap.put("tests.nbFailure",new Integer(0));
            final <%=className %> <%=className %>Class = new <%=className %>();
            java.util.List<String> paraList_<%=instance%> = new java.util.ArrayList<String>();
            paraList_<%=instance%>.add("--context=<%=context%>");
            <%
        for(String testData : ProcessUtils.getTestData(process,instance)){
            String path =  ProcessUtils.getTestDataValue(process, instance, testData);
            String paramemterName = ProcessUtils.getTestDataParamemter(process, instance, testData);
            if(path!=null&&path.length()>0){
            %>

            String instance_<%=testData%>=null;
            <%
            if(ProcessUtils.isSpark(process)){
            String lineSeparator = (String) java.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction("line.separator"));
            String fileContentEnCodeStr = "";
            try {
                fileContentEnCodeStr = (new sun.misc.BASE64Encoder()).encode(path.getBytes("UTF-8"));
            } catch (java.io.UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            StringBuilder result = new StringBuilder();
            String[] arrayStr = fileContentEnCodeStr.split(lineSeparator);
            for(String item : arrayStr){
                result.append(item);
            }
            String testDataValue = result.toString();
            %>
                try {
                    instance_<%=testData%> = new String((new sun.misc.BASE64Decoder()).decodeBuffer("<%=testDataValue%>"), utf8Charset);
                } catch (java.lang.Exception e) {
                    e.printStackTrace();
                }

            <%
            }else if(paramemterName!=null){
            %>
                java.net.URL url_<%=testData%> = getClass().getResource("<%=path%>");
                instance_<%=testData%>="<%=paramemterName%>=" + java.net.URLDecoder.decode(url_<%=testData%>.getPath(), "<%=encoding%>");

            <%
            }else{
            %>
                java.net.URL url_<%=testData%> = getClass().getResource("<%=path%>");
                instance_<%=testData%>="<%=testData%>=" + java.net.URLDecoder.decode(url_<%=testData%>.getPath(), "<%=encoding%>");
            <%
            }
            %>
            paraList_<%=instance%>.add("--context_param");
            paraList_<%=instance%>.add(instance_<%=testData%>);
        <%
         }

        }
        %>
        String[] arrays = new String[paraList_<%=instance%>.size()];
        for(int i=0;i<paraList_<%=instance%>.size();i++){
            arrays[i] = (String)paraList_<%=instance%>.get(i);
        }
        <%=className %>Class.runJobInTOS(arrays);

        String errors = (String)junitGlobalMap.get("tests.log");
        Integer nbFailure = (Integer)junitGlobalMap.get("tests.nbFailure");
        assertTrue("Failure="+nbFailure+java.lang.System.getProperty("line.separator")+errors, errors.isEmpty());

         if(<%=className %>Class.exception!=null){
            throw <%=className %>Class.exception;
        }
        }
        <%
        }
    }
    %>

    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
    <%
        List<INode> tBufferNodes = (List<INode>)process.getNodesOfType("tBufferOutput");
        if(tBufferNodes != null && tBufferNodes.size() > 0) {
    %>
        String[][] bufferValue = (String[][])globalBuffer.toArray(new String[globalBuffer.size()][]);
    <%
        } else {
    %>
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };
    <%
        }
    %>

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	<%//For TDI-28558
        	List<INode> tBufferNodesList = (List<INode>)process.getNodesOfType("tBufferOutput");
        	if(tBufferNodesList != null && tBufferNodesList.size() > 0) {
    	%>
        		hastBufferOutput = true;
    	<%
        	}
		%>
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

        <%if(isLog4jEnabled){%>
	        if(!"".equals(log4jLevel)){
				if("trace".equalsIgnoreCase(log4jLevel)){
					log.setLevel(org.apache.log4j.Level.TRACE);
				}else if("debug".equalsIgnoreCase(log4jLevel)){
					log.setLevel(org.apache.log4j.Level.DEBUG);
				}else if("info".equalsIgnoreCase(log4jLevel)){
					log.setLevel(org.apache.log4j.Level.INFO);
				}else if("warn".equalsIgnoreCase(log4jLevel)){
					log.setLevel(org.apache.log4j.Level.WARN);
				}else if("error".equalsIgnoreCase(log4jLevel)){
					log.setLevel(org.apache.log4j.Level.ERROR);
				}else if("fatal".equalsIgnoreCase(log4jLevel)){
					log.setLevel(org.apache.log4j.Level.FATAL);
				}else if ("off".equalsIgnoreCase(log4jLevel)){
					log.setLevel(org.apache.log4j.Level.OFF);
				}
				org.apache.log4j.Logger.getRootLogger().setLevel(log.getLevel());
    	    }
        	log.info("TalendJob: '<%=codeGenArgument.getJobName()%>' - Start.");
    	<%}%>

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

<%
        if (stats) {
%>
        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
<%
        }
%>

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = <%=className%>.class.getClassLoader().getResourceAsStream("<%=jobClassPackageFolder%>/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            <% for (IContextParameter ctxParam :params)
            {
				%>
				    context.setContextType("<%=ctxParam.getName()%>", "<%=ctxParam.getType()%>");
				<%
            	if (ctxParam.getType().equals("id_Password")) {
            %>
            		String pwd_<%=ctxParam.getName()%>_value = context.getProperty("<%=ctxParam.getName()%>");
            		context.<%=ctxParam.getName()%> = null;
            		if(pwd_<%=ctxParam.getName()%>_value!=null) {
            			if(context_param.containsKey("<%=ctxParam.getName()%>")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.<%=ctxParam.getName()%> = pwd_<%=ctxParam.getName()%>_value;
            			} else if (!pwd_<%=ctxParam.getName()%>_value.isEmpty()) {
            				try {
            					context.<%=ctxParam.getName()%> = routines.system.PasswordEncryptUtil.decryptPassword(pwd_<%=ctxParam.getName()%>_value);
            					context.put("<%=ctxParam.getName()%>",context.<%=ctxParam.getName()%>);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
            <%
            		continue;
            	}
                String typeToGenerate ="String";
                if( !(ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory") ||ctxParam.getType().equals("id_List Of Value")))
                {
                   typeToGenerate=JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true);
                }
                if(typeToGenerate.equals("java.util.Date"))
                {

            %>
            try{
                String context_<%=ctxParam.getName()%>_value = context.getProperty("<%=ctxParam.getName()%>");
                if (context_<%=ctxParam.getName()%>_value == null){
                    context_<%=ctxParam.getName()%>_value = "";
                }
                int context_<%=ctxParam.getName()%>_pos = context_<%=ctxParam.getName()%>_value.indexOf(";");
                String context_<%=ctxParam.getName()%>_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_<%=ctxParam.getName()%>_pos > -1){
                    context_<%=ctxParam.getName()%>_pattern = context_<%=ctxParam.getName()%>_value.substring(0, context_<%=ctxParam.getName()%>_pos);
                    context_<%=ctxParam.getName()%>_value = context_<%=ctxParam.getName()%>_value.substring(context_<%=ctxParam.getName()%>_pos + 1);
                }

                context.<%=ctxParam.getName()%>=(java.util.Date)(new java.text.SimpleDateFormat(context_<%=ctxParam.getName()%>_pattern).parse(context_<%=ctxParam.getName()%>_value));

            }catch(ParseException e)
            {
                context.<%=ctxParam.getName()%>=null;
            }
              <%
                }else if(typeToGenerate.equals("Object")||typeToGenerate.equals("String")||typeToGenerate.equals("java.lang.String") )
                {
                %>
                context.<%=ctxParam.getName()%>=(<%=typeToGenerate%>) context.getProperty("<%=ctxParam.getName()%>");
                <%
                }else if(typeToGenerate.equals("Character")&&ctxParam.getName()!=null)
                {
             %>
             context.<%=ctxParam.getName()%>= new java.text.StringCharacterIterator(context.getProperty("<%=ctxParam.getName()%>")).first();
         <%
                } else {
             %>
             try{
                 context.<%=ctxParam.getName()%>=routines.system.ParserUtils.parseTo_<%=typeToGenerate%> (context.getProperty("<%=ctxParam.getName()%>"));
             }catch(NumberFormatException e){
                 context.<%=ctxParam.getName()%>=null;
              }
             <%
                }
            }
            %>
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        <% for (IContextParameter ctxParam :params){
            //about the type, they are same as header.javajet
            String typeToGenerate = "String";
            if(ctxParam.getType().equals("id_List Of Value") || ctxParam.getType().equals("id_File") || ctxParam.getType().equals("id_Directory")){
                typeToGenerate = "String";
            }else{
                typeToGenerate = JavaTypesManager.getTypeToGenerate(ctxParam.getType(),true);
            }
        %>if (parentContextMap.containsKey("<%=ctxParam.getName()%>")) {
                context.<%=ctxParam.getName()%> = (<%=typeToGenerate %>) parentContextMap.get("<%=ctxParam.getName()%>");
            }<%}%>
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
<% 		for(IContextParameter ctxParam :params) {
        	if ("id_Password".equals(ctxParam.getType())) {
%>
			parametersToEncrypt.add("<%=ctxParam.getName()%>");
<%
        	}
        }
%>
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

<%
        if (stats) {
%>
if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}
<%
    }
%>

<%
    if (trace) {
%>
    try {
        runTrace.openSocket(!isChildJob);
        runTrace.startThreadTrace(clientHost, portTraces);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
<%
    }
%>

<%= ElementParameterParser.getValue(process, "__HEADER_CODE__")%>
	<%//if(containsTPartitioner){//as tMatchGroupIn and tFuzzyUniqRow use this concurrentHashMap, so generate always%>
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	<%//}%>

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
<%
        //1. send the begin msg

        for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
        <%=statCatcherNode.getUniqueName() %>.addMessage("begin");
<%
        }

        List<INode> prejobNodes = new ArrayList<INode>();

        List<INode> postjobNodes = new ArrayList<INode>();

        List<INode> hadoopConfNodes = new ArrayList<INode>();
        Set<String> hadoopClusterIds = new HashSet<String>();

        INode implicit_Context = null;

        for (INode rootNode : rootNodes) {
            String componentName = rootNode.getComponent().getName();
            String uniqueName = rootNode.getUniqueName();

            if (componentName.equals("tPrejob")) {
                prejobNodes.add(rootNode);
                continue;
            }

            if (componentName.equals("tPostjob")) {
                postjobNodes.add(rootNode);
                continue;
            }

            if (componentName.equals("tHadoopConfManager")) {
                hadoopConfNodes.add(rootNode);
                org.talend.core.model.process.IElementParameter ciParam = rootNode.getElementParameter("CLUSTER_ID");
                if (ciParam != null) {
                    Object repIdObj = ciParam.getValue();
                    if (repIdObj != null) {
                        hadoopClusterIds.add(String.valueOf(repIdObj));
                    }
                }
                continue;
            }

            if (uniqueName.startsWith("Implicit_Context_")) {
                implicit_Context = rootNode;
                continue;
            }
        }
%>

<%if (hadoopClusterIds.size() > 1) {%>
    System.err.println("Only one hadoop configuration is allowed in one job!");
<%}%>

<%
// run tHadoopConfManager component if there is it.
 if(!hadoopConfNodes.isEmpty()) {
    INode hadoopConfNode = hadoopConfNodes.get(0);
%>
<%=createCallProcess(hadoopConfNode, className, false) %>
<%
 }
%>

<%
//2. load implicit contextload
 if(implicit_Context != null) {
%>
<%=createCallProcess(implicit_Context, className, false) %>
<%
 }
%>

this.globalResumeTicket = true;//to run tPreJob

<%
//3. run pre-job
 if(!prejobNodes.isEmpty()) {
    for(INode preNode:prejobNodes) {
%>
<%=createCallProcess(preNode, className, false) %>
<%
    }
 }
%>


<%
        //4. flush the begin msg
        for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
        try {
            <%=statCatcherNode.getDesignSubjobStartNode().getUniqueName() %>Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
<%
        }
%>

this.globalResumeTicket = false;//to run others jobs

<%

    //5. all others sub-job (MultiThread mode)
    if(isRunInMultiThread){
        %>final Thread launchingThread = Thread.currentThread();<%
        for (INode rootNode : rootNodes) {
            String componentName = rootNode.getComponent().getName();
            String uniqueName = rootNode.getUniqueName();

            //filter the special subjob
            if("tPrejob".equals(componentName)) continue;
            if("tPostjob".equals(componentName)) continue;
            if("tHadoopConfManager".equals(componentName)) continue;

            //bug16808 when use parallel option at Output components, that will multi thread
            if(componentName.startsWith("tAsyncIn")) continue;
            //end bug16808

            if(implicit_Context!=null && implicit_Context.getUniqueName().equals(uniqueName)) continue;

            if (!componentName.equals("tLogCatcher") && !componentName.equals("tFlowMeterCatcher") && !componentName.equals("tAssertCatcher") && !componentName.equals("tStatCatcher")) {
%>
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                <%=createCallProcess(rootNode, className, true) %>
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

<%
            }
        }
%>
    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }


<%
    } else { // isRunInMultiThread  //5. all others sub-job (SingleThread  mode)
        for (INode rootNode : rootNodes) {
            String componentName = rootNode.getComponent().getName();
            String uniqueName = rootNode.getUniqueName();

            //filter the special subjob
            if("tPrejob".equals(componentName)) continue;
            if("tPostjob".equals(componentName)) continue;
            if("tHadoopConfManager".equals(componentName)) continue;
            if(implicit_Context!=null && implicit_Context.getUniqueName().equals(uniqueName)) continue;

            if (!componentName.equals("tLogCatcher") && !componentName.equals("tFlowMeterCatcher") && !componentName.equals("tAssertCatcher") && !componentName.equals("tStatCatcher") && !componentName.equals("tAsyncIn")) {
%>
<%=createCallProcess(rootNode, className, false) %>
<%    }
    }
}// end if(isRunInMultiThread)
%>

this.globalResumeTicket = true;//to run tPostJob

<%
//6. run the post-job
 if(!postjobNodes.isEmpty()){
    for(INode postNode:postjobNodes){
%>
<%=createCallProcess(postNode, className, false) %>
<%
    }
 }
%>

<%= ElementParameterParser.getValue(process, "__FOOTER_CODE__")%>

        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : <%=className %>");
        }
<%
    //7. send & flush the end msg to statcatcher
    for (INode statCatcherNode : process.getNodesOfType("tStatCatcher")) {
%>
        <%=statCatcherNode.getUniqueName() %>.addMessage(status==""?"end":status, (end-startTime));
        try {
            <%=statCatcherNode.getDesignSubjobStartNode().getUniqueName() %>Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
<%
    }
%>

<% if (exist_tMOM) { %>
    closeJmsConnections();
<% } %>

<% if (exist_tSCP) { %>
    closeScpConnections();
<% } %>

<%
    if (hasSAM4RS || hasSAM4WS) {
%>
    if (false<% if (hasSAM4RS) { %> || null == eventFeature<% } %><% if (hasSAM4WS) { %> || null == registry<% } %>) { // TESB-8574: Fix SAM timeout issue in Studio
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
        }
    }
<%
    }
%>


<%
    if (stats) {
%>
if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
<%
    }

    if (trace) {
%>
        runTrace.stopThreadTrace();
<%
    }
%>
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
<% if(exist_tMOM) { %>
    closeJmsConnections();
<% } %>
<% if(exist_tSCP) { %>
    closeScpConnections();
<% } %>
<% if (exist_tSQLDB) { %>
    closeSqlDbConnections();
<% } %>
<% if (exist_tCassandra) { %>
    closeCassandraConnections();
<% } %>
<% if (exist_tHBase) { %>
    closeHBaseConnections();
<% } %>
<% if (exist_tFtp) { %>
    closeFtpConnections();
<% } %>
<% if (exist_tS3) { %>
    closeS3Connections();
<% } %>
<% if (exist_tLDAP) { %>
    closeLDAPConnections();
<% } %>
<% if (exist_tMDM) { %>
    closeMDMConnections();
<% } %>
<% if (exist_tPalo) { %>
    closePaloConnections();
<% } %>
<% if (exist_tEXist) { %>
    closeEXistConnections();
<% } %>
<% if (exist_tGS) { %>
    closeGSConnections();
<% } %>


    }

<%
    if(exist_tMOM) {
%>
    private void closeJmsConnections() {
        try {
            Object obj_conn;
<%
            for (INode momNode : momComponentsList) {
            // fix for TESB-16026
            if (!(Boolean.valueOf(ElementParameterParser.getValue(momNode, "__USE_CONNECTION__")) || Boolean.valueOf(ElementParameterParser.getValue(momNode, "__USE_SHARED_CONNECTION__")))) {
            // end fix for TESB-16026
%>
            obj_conn = globalMap.remove("connection_<%=momNode.getUniqueName() %>");
            if (null != obj_conn) {
                ((javax.jms.Connection) obj_conn).close();
            }
<%
            }
            // fix for TESB-16026
            }
            // end fix for TESB-16026
%>
        } catch (java.lang.Exception e) {
        }
    }
<%
    }
%>

<%
    if(exist_tSCP) {
%>
    private void closeScpConnections() {
        try {
            Object obj_conn;
<%
            for (INode scpNode : scpComponentsList) {
%>
            obj_conn = globalMap.remove("conn_<%=scpNode.getUniqueName() %>");
            if (null != obj_conn) {
                ((ch.ethz.ssh2.Connection) obj_conn).close();
            }
<%
            }
%>
        } catch (java.lang.Exception e) {
        }
    }
<%
    }
%>

<%  if(exist_tSQLDB) { %>
    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
<%    for (INode sqlDbComponent : sqlDbComponentsList) { %>
            obj_conn = globalMap.remove("conn_<%=sqlDbComponent.getUniqueName() %>");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
<%    } %>
        } catch (java.lang.Exception e) {
        }
    }
<%  } %>

<% if (exist_tCassandra) { %>
    private void closeCassandraConnections() {
        try {
            Object obj_cluster;
            Object obj_conn;
<%  for (INode cassandraDbNode : cassandraComponentsList) {
        if((new API_selector()).useDatastax(cassandraDbNode)) { %>
            obj_cluster = globalMap.remove("cluster_<%=cassandraDbNode.getUniqueName()%>");
            obj_conn = globalMap.remove("connection_<%=cassandraDbNode.getUniqueName()%>");
            if(obj_conn != null) {
                ((com.datastax.driver.core.Session) obj_conn).close();
            }
            if(obj_cluster != null) {
                ((com.datastax.driver.core.Cluster) obj_cluster).close();
            }
<%      } else { %>
            obj_conn = globalMap.remove("cluster_<%=cassandraDbNode.getUniqueName()%>");
            if(obj_conn!=null) {
                ((me.prettyprint.hector.api.Cluster) obj_conn).getConnectionManager().shutdown();
            }
<%      }
    }%>
        } catch (java.lang.Exception e) {
        }
    }
<%   }//End if
%>

<%  if(exist_tHBase) { %>
    private void closeHBaseConnections() {
        try {
<%
	for (INode hbaseComponent : hbaseComponentsList) {

        String hbaseDistribution = ElementParameterParser.getValue(hbaseComponent, "__DISTRIBUTION__");
	    String hbaseVersion = ElementParameterParser.getValue(hbaseComponent, "__HBASE_VERSION__");

        org.talend.hadoop.distribution.component.HBaseComponent hbaseDistrib = null;
        try {
            hbaseDistrib = (org.talend.hadoop.distribution.component.HBaseComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(hbaseDistribution, hbaseVersion);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
            return "";
        }

        boolean isCustom = hbaseDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;

	    boolean isHadoop2 = "HADOOP_2".equals(ElementParameterParser.getValue(hbaseComponent, "__HADOOP_CUSTOM_VERSION__"));%>
   			org.apache.hadoop.conf.Configuration conn_<%=hbaseComponent.getUniqueName()%> =(org.apache.hadoop.conf.Configuration)globalMap.get("conn_<%=hbaseComponent.getUniqueName()%>");
			if(conn_<%=hbaseComponent.getUniqueName()%> != null )
	        {
			<%
				if((isCustom && isHadoop2) || (!isCustom && hbaseDistrib.doSupportNewHBaseAPI())) {%>
		        org.apache.hadoop.hbase.client.HConnection hConnection_<%=hbaseComponent.getUniqueName() %> = org.apache.hadoop.hbase.client.HConnectionManager.getConnection(conn_<%=hbaseComponent.getUniqueName() %>);
		        if ((hConnection_<%=hbaseComponent.getUniqueName() %> != null) && (!hConnection_<%=hbaseComponent.getUniqueName() %>.isClosed())) {
				    hConnection_<%=hbaseComponent.getUniqueName() %>.close();
			}
			<%} else {%>
				org.apache.hadoop.hbase.client.HConnectionManager.deleteConnection(conn_<%=hbaseComponent.getUniqueName() %>,true);
			<%}%>
			}
      globalMap.remove("conn_<%=hbaseComponent.getUniqueName() %>");
	<%}%>
        } catch (java.lang.Exception e) {
        }
    }
<%  } %>

<% if (exist_tFtp) { %>
    private void closeFtpConnections() {
        try {
            Object obj_conn;
<%  for (INode ftpNode : ftpComponentsList) { %>
            obj_conn = globalMap.remove("conn_<%=ftpNode.getUniqueName() %>");
            if (obj_conn != null) {
<%          String type;
            if (("true").equals(ElementParameterParser.getValue(ftpNode, "__SFTP__"))) {
                type = "sftp";
            } else if (("true").equals(ElementParameterParser.getValue(ftpNode, "__FTPS__"))) {
                type = "ftps";
            } else {
                type = "ftp";
            }
            if ("ftp".equals(type)) { %>
                ((com.enterprisedt.net.ftp.FTPClient) obj_conn).quit();
        <%} else if ("sftp".equals(type)) { %>
                ((com.jcraft.jsch.ChannelSftp) obj_conn).quit();
        <%} else { %>
                ((it.sauronsoftware.ftp4j.FTPClient) obj_conn).disconnect(true);
        <%}%>
            }
<%  } %>
        } catch (java.lang.Exception e) {
        }
    }
<%}%>

<%  if(exist_tS3) { %>
    private void closeS3Connections() {
        try {
<%    for (INode s3Component : s3ComponentsList) { %>
    	com.amazonaws.services.s3.AmazonS3Client conn_<%=s3Component.getUniqueName() %> = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_<%=s3Component.getUniqueName() %>");
	    if(conn_<%=s3Component.getUniqueName() %> !=null){
			conn_<%=s3Component.getUniqueName() %>.shutdown();
		}
<%    } %>
        } catch (java.lang.Exception e) {
        }
    }
<%  } %>

<% if (exist_tLDAP) { %>
    private void closeLDAPConnections() {
        try {
            Object obj_conn;
<%  for (INode ldapNode : ldapComponentsList) { %>
            obj_conn = globalMap.remove("conn_<%=ldapNode.getUniqueName() %>");
            if (obj_conn != null) {
                ((javax.naming.ldap.InitialLdapContext) obj_conn).close();
            }
<%  } %>
        } catch (java.lang.Exception e) {
        }
    }
<%}%>

<%  if(exist_tMDM) { %>
    private void closeMDMConnections() {
        try {
            java.util.Iterator keySets = globalMap.keySet().iterator();
            while (keySets.hasNext()) {
                String key = keySets.next().toString();
                if (key.startsWith("TMDMService_tMDMConnection_")) {
                    org.talend.mdm.webservice.TMDMService service = (org.talend.mdm.webservice.TMDMService)globalMap.get(key);
                    if (service != null) {
                        service.logout(new org.talend.mdm.webservice.WSLogout());
                    }
                }
            }
        } catch (java.lang.Exception e) {
        }
    }
<%  } %>


<%  if(exist_tPalo) { %>
    private void closePaloConnections() {
        try {
<%    for (INode paloComponent : paloComponentsList) { %>
    	org.talend.jpalo.paloconnection pConn_<%=paloComponent.getUniqueName()%> = (org.talend.jpalo.paloconnection)globalMap.get("pConn_<%=paloComponent.getUniqueName()%>");
	    if(pConn_<%=paloComponent.getUniqueName()%> !=null){
					pConn_<%=paloComponent.getUniqueName() %>.logout();

		}
<%    } %>
        } catch (java.lang.Exception e) {
        }
    }
<%  } %>

<%  if(exist_tEXist) { %>
    private void closeEXistConnections() {
        try {
<%    for (INode existComponent : existComponentsList) { %>
		org.xmldb.api.base.Collection col_<%=existComponent.getUniqueName()%> = (org.xmldb.api.base.Collection)globalMap.get("col_<%=existComponent.getUniqueName()%>");
	    if(col_<%=existComponent.getUniqueName()%> !=null){
					col_<%=existComponent.getUniqueName()%>.close();

		}
<%    } %>
        } catch (java.lang.Exception e) {
        }
    }
<%  } %>

<%  if(exist_tGS) { %>
    private void closeGSConnections() {
        try {
<%    for (INode gsComponent : gsComponentsList) { %>
		org.jets3t.service.impl.rest.httpclient.GoogleStorageService service_<%=gsComponent.getUniqueName()%> =
				(org.jets3t.service.impl.rest.httpclient.GoogleStorageService)globalMap.get("service_<%=gsComponent.getUniqueName()%>");
		if(service_<%=gsComponent.getUniqueName()%> !=null){
				service_<%=gsComponent.getUniqueName()%>.shutdown();
	    }

<%    } %>
        } catch (java.lang.Exception e) {
        }
    }
<%  } %>

    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
<%
        for (INode momNode : momComponentsList) {
%>
            connections.put("connection_<%=momNode.getUniqueName() %>", globalMap.get("connection_<%=momNode.getUniqueName() %>"));
            connections.put("session_<%=momNode.getUniqueName() %>", globalMap.get("session_<%=momNode.getUniqueName() %>"));
<%
        }
%>
<%
        for (INode scpNode : scpComponentsList) {
%>
            connections.put("conn_<%=scpNode.getUniqueName() %>", globalMap.get("conn_<%=scpNode.getUniqueName() %>"));
<%
        }
%>
<%
        for (INode sqlDbNode : sqlDbComponentsList) {
%>
            connections.put("conn_<%=sqlDbNode.getUniqueName() %>", globalMap.get("conn_<%=sqlDbNode.getUniqueName() %>"));
<%
        }
%>
<%

        for (INode cassandraDbNode : cassandraComponentsList) {
            if((new API_selector()).useDatastax(cassandraDbNode)) { %>
            connections.put("connection_<%=cassandraDbNode.getUniqueName() %>", globalMap.get("connection_<%=cassandraDbNode.getUniqueName() %>"));
            connections.put("cluster_<%=cassandraDbNode.getUniqueName() %>", globalMap.get("cluster_<%=cassandraDbNode.getUniqueName() %>"));
<%          } else { %>
            connections.put("cluster_<%=cassandraDbNode.getUniqueName() %>", globalMap.get("cluster_<%=cassandraDbNode.getUniqueName()%>"));
<%          }
        }
%>

<%
        for (INode hbaseNode : hbaseComponentsList) {
%>
            connections.put("conn_<%=hbaseNode.getUniqueName() %>", globalMap.get("conn_<%=hbaseNode.getUniqueName() %>"));
<%
        }
%>

<%      for (INode ftpNode : ftpComponentsList) { %>
            connections.put("conn_<%=ftpNode.getUniqueName() %>", globalMap.get("conn_<%=ftpNode.getUniqueName() %>"));
<%      } %>
<%
        for (INode s3Node : s3ComponentsList) {
%>
            connections.put("conn_<%=s3Node.getUniqueName() %>", globalMap.get("conn_<%=s3Node.getUniqueName() %>"));
<%
        }
%>
<%      for (INode ldapNode : ldapComponentsList) { %>
            connections.put("conn_<%=ldapNode.getUniqueName() %>", globalMap.get("conn_<%=ldapNode.getUniqueName() %>"));
            connections.put("connBaseDN_<%=ldapNode.getUniqueName() %>", globalMap.get("connBaseDN_<%=ldapNode.getUniqueName() %>"));
<%      } %>

<%      for (INode mdmNode : mdmComponentsList) {%>
            connections.put("mdmUrl_<%=mdmNode.getUniqueName() %>", globalMap.get("mdmUrl_<%=mdmNode.getUniqueName() %>"));
            connections.put("username_<%=mdmNode.getUniqueName() %>", globalMap.get("username_<%=mdmNode.getUniqueName() %>"));
            connections.put("password_<%=mdmNode.getUniqueName() %>", globalMap.get("password_<%=mdmNode.getUniqueName() %>"));
            connections.put("useTransaction_<%=mdmNode.getUniqueName() %>", globalMap.get("useTransaction_<%=mdmNode.getUniqueName() %>"));
            connections.put("useClientTranId_<%=mdmNode.getUniqueName() %>", globalMap.get("useClientTranId_<%=mdmNode.getUniqueName() %>"));
<%      } %>

<%      for (INode paloNode : paloComponentsList) { %>
            connections.put("p_<%=paloNode.getUniqueName() %>", globalMap.get("p_<%=paloNode.getUniqueName() %>"));
            connections.put("pConn_<%=paloNode.getUniqueName() %>", globalMap.get("pConn_<%=paloNode.getUniqueName() %>"));
<%      } %>
<%      for (INode existNode : existComponentsList) { %>
            connections.put("col_<%=existNode.getUniqueName()%>", globalMap.get("col_<%=existNode.getUniqueName()%>"));
<%      } %>

<%      for (INode salesforceNode : salesforceComponentsList) { %>
            connections.put("conn_<%=salesforceNode.getUniqueName()%>", globalMap.get("conn_<%=salesforceNode.getUniqueName()%>"));
<%      } %>
<%      for (INode sapNode : sapComponentsList) { %>
            connections.put("conn_<%=sapNode.getUniqueName()%>", globalMap.get("conn_<%=sapNode.getUniqueName()%>"));
<%      } %>
<%      for (INode gsNode : gsComponentsList) { %>
            connections.put("service_<%=gsNode.getUniqueName()%>", globalMap.get("service_<%=gsNode.getUniqueName()%>"));
<%      } %>


        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
