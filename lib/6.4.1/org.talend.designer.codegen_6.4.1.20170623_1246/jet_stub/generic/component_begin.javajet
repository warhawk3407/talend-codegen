<%@ jet
imports="
        org.talend.designer.core.generic.model.Component
        java.util.ArrayList
        java.util.HashMap
        java.util.HashSet
        java.util.List
        java.util.Map
        java.util.Set
        java.util.Stack
        org.talend.components.api.component.ComponentDefinition
        org.talend.components.api.component.ConnectorTopology
        org.talend.components.api.container.RuntimeContainer
        org.talend.components.api.properties.ComponentProperties
        org.talend.components.api.properties.ComponentReferenceProperties
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.EParameterFieldType
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.IElementParameter
        org.talend.core.model.process.INode
        org.talend.core.model.utils.TalendTextUtils
        org.talend.daikon.NamedThing
        org.talend.daikon.properties.property.Property
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.utils.NodeUtil
        org.talend.designer.core.generic.constants.IGenericConstants
        "
%>
<%@include file="@{org.talend.designer.codegen}/jet_stub/generic/component_util_indexedrecord_to_rowstruct.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
Component component = (Component)node.getComponent();
ComponentProperties componentProps = node.getComponentProperties();
ComponentDefinition def = component.getComponentDefinition();

List<IMetadataTable> metadatas = node.getMetadataList();
IMetadataTable metadata = null;
List<IMetadataColumn> columnList = null;
if ((metadatas != null) && (metadatas.size() > 0)) { // metadata
    metadata = metadatas.get(0);
    if(metadata != null){
        columnList = metadata.getListColumns();
    }
}

// Set up the component definition, and the properties for all types of
// components.

%>

org.talend.components.api.component.ComponentDefinition def_<%=cid %> =
        new <%= def.getClass().getName()%>();
<%
List<Component.CodegenPropInfo> propsToProcess = component.getCodegenPropInfos(componentProps);
%>

<%= componentProps.getClass().getName()%> props_<%=cid %> =
        (<%= componentProps.getClass().getName()%>) def_<%=cid %>.createRuntimeProperties();
<%

final Set<String> referenceProperties = new HashSet<String>();

for (Component.CodegenPropInfo propInfo : propsToProcess) { // propInfo
    List<NamedThing> properties = propInfo.props.getProperties();
    for (NamedThing prop : properties) { // property
        if (prop instanceof Property) { // if, only deal with valued Properties
            Property property = (Property)prop;
            if (property.getFlags() != null && (property.getFlags().contains(Property.Flags.DESIGN_TIME_ONLY) || property.getFlags().contains(Property.Flags.HIDDEN)))
                continue;
            Object value = property.getStoredValue();
            if (value != null) {
                if (value instanceof List) {
                    // added for the support of tables
                    String tmpVarName = cid+propInfo.fieldName.replace('.','_')+"_"+property.getName();
                    %>
                    java.util.List<Object> <%=tmpVarName %> = new java.util.ArrayList<Object>();
                    <%
                    for (Object subPropertyValue : (java.util.List<Object>)property.getValue()) {
                        if ((property.getPossibleValues() != null && property.getPossibleValues().size() > 0)||
                        	Boolean.valueOf(String.valueOf(property.getTaggedValue(IGenericConstants.ADD_QUOTES)))) {
                            %>
                            <%=tmpVarName %>.add("<%=subPropertyValue %>");
                            <%
                        } else if(!"".equals(subPropertyValue)) {
                                %>
                                <%=tmpVarName %>.add(<%=subPropertyValue %>);
                                <%
                        } else {
                            %>
                            <%=tmpVarName %>.add("");
                            <%
                        }
                    }
                    %>
                    ((org.talend.daikon.properties.Properties)props_<%=cid %><%=propInfo.fieldName%>).setValue("<%=property.getName()%>",<%=tmpVarName %>);
                    <%
                }  else if (value instanceof String && property.isFlag(Property.Flags.ENCRYPT) && ElementParameterParser.canEncryptValue((String) value)) {
                    if (!"".equals(property.getStringValue())) {
                        %>
                        props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>",
                        routines.system.PasswordEncryptUtil.decryptPassword(<%=component.getCodegenValue(property, (String) value)%>));
                        <%
                    }
                } else if (value != null && "java.util.Date".equals(property.getType())){
                    %>
                    props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>",
                        TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",<%=component.getCodegenValue(property, value.toString())%>));
                    <%
                } else if (property instanceof org.talend.daikon.properties.property.EnumProperty) {
                    %>
                    props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>",
                        <%=property.getType().replaceAll("<.*>", "")%>.<%=property.getValue()%>);
                    <%
                } else if (property instanceof org.talend.daikon.properties.property.SchemaProperty) {
                    %>
                    props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>",
                        new org.apache.avro.Schema.Parser().parse(<%=component.getCodegenValue(property, property.getStringValue())%>));
                    <%
                } else if (!(value instanceof String) || !((String)value).equals("")) {
                    %>
                    props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>",
                    <%=component.getCodegenValue(property, value.toString())%>);
                    <%
                }
            }

            if("java.lang.Integer".equals(property.getType()) && (value == null || ((value instanceof String) && ((String)value).isEmpty()))) {//need to overwrite the default value when the passed value is null or empty string from the model
        	%>
                props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>", null);
            <%
            }
        } else if (prop instanceof ComponentReferenceProperties) {
            final String fieldString = propInfo.fieldName + "." + prop.getName();
            referenceProperties.add(fieldString);
        } //else may be a ComponentProperties so ignore
    } // property
} // propInfo

for (final String fieldString : referenceProperties) {
    %>
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_<%=cid %><%=fieldString %>.referenceType.getValue()) {
        final String referencedComponentInstanceId_<%=cid %> = props_<%=cid %><%=fieldString %>.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_<%=cid %> != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_<%=cid %> = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_<%=cid %> + "_COMPONENT_RUNTIME_PROPERTIES");
            props_<%=cid %><%=fieldString %>.setReference(referencedComponentProperties_<%=cid %>);
        }
    }
    <%
}
%>
globalMap.put("<%=cid %>_COMPONENT_RUNTIME_PROPERTIES", props_<%=cid %>);

org.talend.components.api.container.RuntimeContainer container_<%=cid%> = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "<%=cid%>";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_<%=cid %> = 0;

org.talend.components.api.component.ConnectorTopology topology_<%=cid%> = null;
<%
boolean hasInput = !NodeUtil.getIncomingConnections(node, IConnectionCategory.DATA).isEmpty();
boolean hasOutput = !NodeUtil.getOutgoingConnections(node, IConnectionCategory.DATA).isEmpty();
boolean hasOutputOnly = hasOutput && !hasInput;

if (hasInput && hasOutput) {
%>
topology_<%=cid%> = org.talend.components.api.component.ConnectorTopology.INCOMING_AND_OUTGOING;
<%
} else if (hasInput) {
%>
topology_<%=cid%> = org.talend.components.api.component.ConnectorTopology.INCOMING;
<%
} else if (hasOutput) {
%>
topology_<%=cid%> = org.talend.components.api.component.ConnectorTopology.OUTGOING;
<%
} else {
%>
topology_<%=cid%> = org.talend.components.api.component.ConnectorTopology.NONE;
<%
}
%>

org.talend.daikon.runtime.RuntimeInfo runtime_info_<%=cid%> = def_<%=cid%>.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_<%=cid%>, topology_<%=cid%>);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_<%=cid%> = def_<%=cid%>.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_<%=cid%> = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_<%=cid%>.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_<%=cid%> = componentRuntime_<%=cid%>.initialize(container_<%=cid%>, props_<%=cid%>);

if (initVr_<%=cid%>.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_<%=cid%>.getMessage());
}

if(componentRuntime_<%=cid%> instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_<%=cid%> = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_<%=cid%>;
	compDriverInitialization_<%=cid%>.runAtDriver(container_<%=cid%>);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_<%=cid%> = null;
if(componentRuntime_<%=cid%> instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_<%=cid%> = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_<%=cid%>;
	org.talend.daikon.properties.ValidationResult vr_<%=cid%> = sourceOrSink_<%=cid%>.validate(container_<%=cid%>);
	if (vr_<%=cid%>.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_<%=cid%>.getMessage());
	}
}

<%
// Return at this point if there is no metadata.
if (metadata == null) {
    return stringBuffer.toString();
}

Set<ConnectorTopology> connectorTopologies = def.getSupportedConnectorTopologies();
boolean asInputComponent = connectorTopologies!=null && (connectorTopologies.size() < 3) && connectorTopologies.contains(ConnectorTopology.OUTGOING);

if (hasOutputOnly || asInputComponent) {
    %>
    org.talend.components.api.component.runtime.Source source_<%=cid%> =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_<%=cid%>;
    org.talend.components.api.component.runtime.Reader reader_<%=cid%> =
            source_<%=cid%>.createReader(container_<%=cid%>);
	reader_<%=cid%> = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_<%=cid%>, container_<%=cid%>);

    <%
    IConnection main = null;
    List<? extends IConnection> mains = node.getOutgoingConnections("MAIN");
    if (mains!=null && !mains.isEmpty()) {
        main = mains.get(0);
    }

    IConnection reject = null;
    List<? extends IConnection> rejects = node.getOutgoingConnections("REJECT");
    if (rejects != null && !rejects.isEmpty()) {
        reject = rejects.get(0);
    }

	boolean hasDataOutput = (main != null || reject != null);
	IndexedRecordToRowStructGenerator irToRow = null;

	if(hasDataOutput) {
    	IConnection schemaSourceConnector = (main!=null ? main : reject);
    	String schemaSourceConnectorName = schemaSourceConnector.getMetadataTable().getAttachedConnector();
	%>
        boolean multi_output_is_allowed_<%=cid%> = false;
        <% //take care SourceOrSink.validate will change the schema if it contains include-all-fields, so need to get design Avro schema before validate %>
        org.talend.components.api.component.Connector c_<%=cid%> = null;
        for (org.talend.components.api.component.Connector currentConnector : props_<%=cid %>.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("<%=schemaSourceConnectorName%>")) {
                c_<%=cid%> = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_<%=cid%> = true;
            }
        }
        org.apache.avro.Schema schema_<%=cid%> = props_<%=cid %>.getSchema(c_<%=cid%>, true);

    <%
    	irToRow = new IndexedRecordToRowStructGenerator(cid, null, columnList);
    	irToRow.generateInitialVariables("schema_" + cid, false);
    }
    %>

    // Iterate through the incoming data.
    boolean available_<%=cid%> = reader_<%=cid%>.start();

    resourceMap.put("reader_<%=cid%>", reader_<%=cid%>);

    for (; available_<%=cid%>; available_<%=cid%> = reader_<%=cid%>.advance()) {
    	nb_line_<%=cid %>++;

    	<%if(hasDataOutput) {%>
        if (multi_output_is_allowed_<%=cid%>) {
            <%if(main!=null){%>
                <%=main.getName()%> = null;
            <%}%>

            <%if(reject!=null){%>
                <%=reject.getName()%> = null;
            <%}%>
        }
        <%}%>

        try {
            Object data_<%=cid%> = reader_<%=cid%>.getCurrent();
            <%
            if (main != null) {
                %>

                if(multi_output_is_allowed_<%=cid%>) {
                    <%=main.getName()%> = new <%=main.getName() %>Struct();
                }

                <%
                irToRow.generateConvertRecord("data_" + cid, main.getName(), main.getMetadataTable().getListColumns());
            }
            %>
        } catch (org.talend.components.api.exception.DataRejectException e_<%=cid%>) {
        	java.util.Map<String,Object> info_<%=cid%> = e_<%=cid%>.getRejectInfo();
            <%
            if (reject!=null) {
                %>
                Object data_<%=cid%> = info_<%=cid%>.get("talend_record");

                if (multi_output_is_allowed_<%=cid%>) {
                    <%=reject.getName()%> = new <%=reject.getName() %>Struct();
                }
				try{
                <%
                irToRow.generateConvertRecord("data_" + cid, reject.getName());
                %>
                }catch(java.lang.Exception e){
                	// do nothing
                }
                <%
                Set<String> commonColumns = new HashSet<String>();

                for (IMetadataColumn column : columnList) {
                    commonColumns.add(column.getLabel());
                }

                //pass error columns
                List<IMetadataColumn> rejectColumns = reject.getMetadataTable().getListColumns();
                for(IMetadataColumn column : rejectColumns) {
                    String columnName = column.getLabel();

                    // JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
                    String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());

                    //error columns
                    if(!commonColumns.contains(columnName)) {
                        %>
                        <%=reject.getName()%>.<%=columnName%> = (<%=typeToGenerate%>)info_<%=cid%>.get("<%=columnName%>");
                        <%
                    }
                }
            } else {
            %>
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_<%=cid%> = null;
            	if(info_<%=cid%>.containsKey("error")){
            		errorMessage_<%=cid%> = info_<%=cid%>.get("error");
        		}else if(info_<%=cid%>.containsKey("errorMessage")){
            		errorMessage_<%=cid%> = info_<%=cid%>.get("errorMessage");
        		}else{
        			errorMessage_<%=cid%> = "Rejected but error message missing";
        		}
        		errorMessage_<%=cid%> = "Row "+ nb_line_<%=cid %> + ": "+errorMessage_<%=cid%>;
    			System.err.println(errorMessage_<%=cid%>);
            <%
            }
            if (main != null) {
            %>
            	// If the record is reject, the main line record should put NULL
            	<%=main.getName()%> = null;
            <%
            }
        %>
    }
    <%
    // The for loop around the incoming records from the reader is left open.


} else if (hasInput) {
    %>
    org.talend.components.api.component.runtime.Sink sink_<%=cid%> =
            (org.talend.components.api.component.runtime.Sink)sourceOrSink_<%=cid%>;
    org.talend.components.api.component.runtime.WriteOperation writeOperation_<%=cid%> = sink_<%=cid%>.createWriteOperation();
    writeOperation_<%=cid%>.initialize(container_<%=cid%>);
    org.talend.components.api.component.runtime.Writer writer_<%=cid%> = writeOperation_<%=cid%>.createWriter(container_<%=cid%>);
    writer_<%=cid%>.open("<%=cid%>");

    resourceMap.put("writer_<%=cid%>", writer_<%=cid%>);

    org.talend.components.api.component.Connector c_<%=cid%> = null;
    for (org.talend.components.api.component.Connector currentConnector : props_<%=cid %>.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_<%=cid%> = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_<%=cid%> = props_<%=cid %>.getSchema(c_<%=cid%>, false);
    org.talend.daikon.di.DiIncomingSchemaEnforcer current_<%=cid%>
            = new org.talend.daikon.di.DiIncomingSchemaEnforcer(designSchema_<%=cid%>);
    <%
    List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
    if (outgoingConns!=null){
        for (IConnection outgoingConn : outgoingConns) {
            if ("MAIN".equals(outgoingConn.getConnectorName())) {
                %>
                c_<%=cid%> = null;
                for (org.talend.components.api.component.Connector currentConnector : props_<%=cid %>.getAvailableConnectors(null, true)) {
                    if (currentConnector.getName().equals("MAIN")) {
                        c_<%=cid%> = currentConnector;
                    }
                }
                org.apache.avro.Schema mainSchema_<%=cid%> = props_<%=cid %>.getSchema(c_<%=cid%>, true);
                <%
                IndexedRecordToRowStructGenerator mainIrToRow = new IndexedRecordToRowStructGenerator(
                        cid + "OutMain", outgoingConn);
                mainIrToRow.generateInitialVariables("mainSchema_" + cid, false);
            }
            if ("REJECT".equals(outgoingConn.getConnectorName())) {
                %>
                c_<%=cid%> = null;
                for (org.talend.components.api.component.Connector currentConnector : props_<%=cid %>.getAvailableConnectors(null, true)) {
                    if (currentConnector.getName().equals("REJECT")) {
                        c_<%=cid%> = currentConnector;
                    }
                }
                org.apache.avro.Schema rejectSchema_<%=cid%> = props_<%=cid %>.getSchema(c_<%=cid%>, true);
                <%
                IndexedRecordToRowStructGenerator rejectIrToRow = new IndexedRecordToRowStructGenerator(
                        cid + "OutReject", outgoingConn);
                rejectIrToRow.generateInitialVariables("rejectSchema_" + cid, false);
            }
        }
    }
}
%>
